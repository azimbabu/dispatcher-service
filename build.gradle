plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2022.0.3")
    set('otelVersion', "1.26.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter'
//    implementation 'org.springframework.cloud:spring-cloud-function-context'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

bootBuildImage {
    imageName = "${project.name}"
    environment = ["BP_JVM_VERSION": "17.*"]

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }

    if (System.getProperty( "os.arch" ).toLowerCase().startsWith('aarch')) {
        // This builder is only for ARM64 systems.
        builder = "dashaun/builder:tiny"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}
